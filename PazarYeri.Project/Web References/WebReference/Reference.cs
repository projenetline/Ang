//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace PazarYeri.Test.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ISvc", Namespace="http://tempuri.org/")]
    public partial class Svc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AppendDataObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadDataObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadDataObjectXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDataObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateDataObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DirectQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback getValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTableNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback printDocOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Svc() {
            this.Url = global::PazarYeri.Test.Properties.Settings.Default.PazarYeri_Test_WebReference_Svc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AppendDataObjectCompletedEventHandler AppendDataObjectCompleted;
        
        /// <remarks/>
        public event ReadDataObjectCompletedEventHandler ReadDataObjectCompleted;
        
        /// <remarks/>
        public event ReadDataObjectXMLCompletedEventHandler ReadDataObjectXMLCompleted;
        
        /// <remarks/>
        public event DeleteDataObjectCompletedEventHandler DeleteDataObjectCompleted;
        
        /// <remarks/>
        public event CalculateDataObjectCompletedEventHandler CalculateDataObjectCompleted;
        
        /// <remarks/>
        public event ExecQueryCompletedEventHandler ExecQueryCompleted;
        
        /// <remarks/>
        public event DirectQueryCompletedEventHandler DirectQueryCompleted;
        
        /// <remarks/>
        public event getValueCompletedEventHandler getValueCompleted;
        
        /// <remarks/>
        public event getTableNameCompletedEventHandler getTableNameCompleted;
        
        /// <remarks/>
        public event printDocCompletedEventHandler printDocCompleted;
        
        /// <remarks/>
        public event getInfoCompletedEventHandler getInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/AppendDataObject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AppendDataObject(int dataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataTypeSpecified, ref int dataReference, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool dataReferenceSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string dataXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string paramXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string errorString, ref byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass, int FirmNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FirmNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode) {
            object[] results = this.Invoke("AppendDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode});
            dataReference = ((int)(results[0]));
            dataReferenceSpecified = ((bool)(results[1]));
            dataXML = ((string)(results[2]));
            paramXML = ((string)(results[3]));
            errorString = ((string)(results[4]));
            status = ((byte)(results[5]));
            statusSpecified = ((bool)(results[6]));
        }
        
        /// <remarks/>
        public void AppendDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode) {
            this.AppendDataObjectAsync(dataType, dataTypeSpecified, dataReference, dataReferenceSpecified, dataXML, paramXML, errorString, status, statusSpecified, LbsLoadPass, FirmNr, FirmNrSpecified, securityCode, null);
        }
        
        /// <remarks/>
        public void AppendDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode, object userState) {
            if ((this.AppendDataObjectOperationCompleted == null)) {
                this.AppendDataObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppendDataObjectOperationCompleted);
            }
            this.InvokeAsync("AppendDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode}, this.AppendDataObjectOperationCompleted, userState);
        }
        
        private void OnAppendDataObjectOperationCompleted(object arg) {
            if ((this.AppendDataObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppendDataObjectCompleted(this, new AppendDataObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/ReadDataObject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReadDataObject(int dataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataTypeSpecified, ref int dataReference, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool dataReferenceSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string dataXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string paramXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string errorString, ref byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass, int FirmNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FirmNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode) {
            object[] results = this.Invoke("ReadDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode});
            dataReference = ((int)(results[0]));
            dataReferenceSpecified = ((bool)(results[1]));
            dataXML = ((string)(results[2]));
            paramXML = ((string)(results[3]));
            errorString = ((string)(results[4]));
            status = ((byte)(results[5]));
            statusSpecified = ((bool)(results[6]));
        }
        
        /// <remarks/>
        public void ReadDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode) {
            this.ReadDataObjectAsync(dataType, dataTypeSpecified, dataReference, dataReferenceSpecified, dataXML, paramXML, errorString, status, statusSpecified, LbsLoadPass, FirmNr, FirmNrSpecified, securityCode, null);
        }
        
        /// <remarks/>
        public void ReadDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode, object userState) {
            if ((this.ReadDataObjectOperationCompleted == null)) {
                this.ReadDataObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadDataObjectOperationCompleted);
            }
            this.InvokeAsync("ReadDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode}, this.ReadDataObjectOperationCompleted, userState);
        }
        
        private void OnReadDataObjectOperationCompleted(object arg) {
            if ((this.ReadDataObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadDataObjectCompleted(this, new ReadDataObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/ReadDataObjectXML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReadDataObjectXML(int dataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataTypeSpecified, ref int dataReference, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool dataReferenceSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string dataXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string paramXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string errorString, ref byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass, int FirmNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FirmNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode) {
            object[] results = this.Invoke("ReadDataObjectXML", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode});
            dataReference = ((int)(results[0]));
            dataReferenceSpecified = ((bool)(results[1]));
            dataXML = ((string)(results[2]));
            paramXML = ((string)(results[3]));
            errorString = ((string)(results[4]));
            status = ((byte)(results[5]));
            statusSpecified = ((bool)(results[6]));
        }
        
        /// <remarks/>
        public void ReadDataObjectXMLAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode) {
            this.ReadDataObjectXMLAsync(dataType, dataTypeSpecified, dataReference, dataReferenceSpecified, dataXML, paramXML, errorString, status, statusSpecified, LbsLoadPass, FirmNr, FirmNrSpecified, securityCode, null);
        }
        
        /// <remarks/>
        public void ReadDataObjectXMLAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode, object userState) {
            if ((this.ReadDataObjectXMLOperationCompleted == null)) {
                this.ReadDataObjectXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadDataObjectXMLOperationCompleted);
            }
            this.InvokeAsync("ReadDataObjectXML", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode}, this.ReadDataObjectXMLOperationCompleted, userState);
        }
        
        private void OnReadDataObjectXMLOperationCompleted(object arg) {
            if ((this.ReadDataObjectXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadDataObjectXMLCompleted(this, new ReadDataObjectXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/DeleteDataObject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDataObject(int dataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataTypeSpecified, int dataReference, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataReferenceSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string errorString, ref byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass, int FirmNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FirmNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode) {
            object[] results = this.Invoke("DeleteDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode});
            errorString = ((string)(results[0]));
            status = ((byte)(results[1]));
            statusSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void DeleteDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode) {
            this.DeleteDataObjectAsync(dataType, dataTypeSpecified, dataReference, dataReferenceSpecified, errorString, status, statusSpecified, LbsLoadPass, FirmNr, FirmNrSpecified, securityCode, null);
        }
        
        /// <remarks/>
        public void DeleteDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode, object userState) {
            if ((this.DeleteDataObjectOperationCompleted == null)) {
                this.DeleteDataObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDataObjectOperationCompleted);
            }
            this.InvokeAsync("DeleteDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode}, this.DeleteDataObjectOperationCompleted, userState);
        }
        
        private void OnDeleteDataObjectOperationCompleted(object arg) {
            if ((this.DeleteDataObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDataObjectCompleted(this, new DeleteDataObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/CalculateDataObject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CalculateDataObject(int dataType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataTypeSpecified, ref int dataReference, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool dataReferenceSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string dataXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string paramXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string errorString, ref byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass, int FirmNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FirmNrSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode) {
            object[] results = this.Invoke("CalculateDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode});
            dataReference = ((int)(results[0]));
            dataReferenceSpecified = ((bool)(results[1]));
            dataXML = ((string)(results[2]));
            paramXML = ((string)(results[3]));
            errorString = ((string)(results[4]));
            status = ((byte)(results[5]));
            statusSpecified = ((bool)(results[6]));
        }
        
        /// <remarks/>
        public void CalculateDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode) {
            this.CalculateDataObjectAsync(dataType, dataTypeSpecified, dataReference, dataReferenceSpecified, dataXML, paramXML, errorString, status, statusSpecified, LbsLoadPass, FirmNr, FirmNrSpecified, securityCode, null);
        }
        
        /// <remarks/>
        public void CalculateDataObjectAsync(int dataType, bool dataTypeSpecified, int dataReference, bool dataReferenceSpecified, string dataXML, string paramXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, int FirmNr, bool FirmNrSpecified, string securityCode, object userState) {
            if ((this.CalculateDataObjectOperationCompleted == null)) {
                this.CalculateDataObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateDataObjectOperationCompleted);
            }
            this.InvokeAsync("CalculateDataObject", new object[] {
                        dataType,
                        dataTypeSpecified,
                        dataReference,
                        dataReferenceSpecified,
                        dataXML,
                        paramXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass,
                        FirmNr,
                        FirmNrSpecified,
                        securityCode}, this.CalculateDataObjectOperationCompleted, userState);
        }
        
        private void OnCalculateDataObjectOperationCompleted(object arg) {
            if ((this.CalculateDataObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateDataObjectCompleted(this, new CalculateDataObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/ExecQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecQuery([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlText, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderByText, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref object resultXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string errorString, ref byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass) {
            object[] results = this.Invoke("ExecQuery", new object[] {
                        sqlText,
                        orderByText,
                        securityCode,
                        resultXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass});
            resultXML = ((object)(results[0]));
            errorString = ((string)(results[1]));
            status = ((byte)(results[2]));
            statusSpecified = ((bool)(results[3]));
        }
        
        /// <remarks/>
        public void ExecQueryAsync(string sqlText, string orderByText, string securityCode, object resultXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass) {
            this.ExecQueryAsync(sqlText, orderByText, securityCode, resultXML, errorString, status, statusSpecified, LbsLoadPass, null);
        }
        
        /// <remarks/>
        public void ExecQueryAsync(string sqlText, string orderByText, string securityCode, object resultXML, string errorString, byte status, bool statusSpecified, string LbsLoadPass, object userState) {
            if ((this.ExecQueryOperationCompleted == null)) {
                this.ExecQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecQueryOperationCompleted);
            }
            this.InvokeAsync("ExecQuery", new object[] {
                        sqlText,
                        orderByText,
                        securityCode,
                        resultXML,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass}, this.ExecQueryOperationCompleted, userState);
        }
        
        private void OnExecQueryOperationCompleted(object arg) {
            if ((this.ExecQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecQueryCompleted(this, new ExecQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/DirectQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DirectQuery([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sqlText, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string errorString, ref byte status, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool statusSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass) {
            object[] results = this.Invoke("DirectQuery", new object[] {
                        sqlText,
                        securityCode,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass});
            errorString = ((string)(results[0]));
            status = ((byte)(results[1]));
            statusSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void DirectQueryAsync(string sqlText, string securityCode, string errorString, byte status, bool statusSpecified, string LbsLoadPass) {
            this.DirectQueryAsync(sqlText, securityCode, errorString, status, statusSpecified, LbsLoadPass, null);
        }
        
        /// <remarks/>
        public void DirectQueryAsync(string sqlText, string securityCode, string errorString, byte status, bool statusSpecified, string LbsLoadPass, object userState) {
            if ((this.DirectQueryOperationCompleted == null)) {
                this.DirectQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDirectQueryOperationCompleted);
            }
            this.InvokeAsync("DirectQuery", new object[] {
                        sqlText,
                        securityCode,
                        errorString,
                        status,
                        statusSpecified,
                        LbsLoadPass}, this.DirectQueryOperationCompleted, userState);
        }
        
        private void OnDirectQueryOperationCompleted(object arg) {
            if ((this.DirectQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DirectQueryCompleted(this, new DirectQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/getValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getValue(short Flag, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FlagSpecified, ref int Value, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool ValueSpecified, bool isFlag, [System.Xml.Serialization.XmlIgnoreAttribute()] bool isFlagSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass) {
            object[] results = this.Invoke("getValue", new object[] {
                        Flag,
                        FlagSpecified,
                        Value,
                        ValueSpecified,
                        isFlag,
                        isFlagSpecified,
                        securityCode,
                        LbsLoadPass});
            Value = ((int)(results[0]));
            ValueSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void getValueAsync(short Flag, bool FlagSpecified, int Value, bool ValueSpecified, bool isFlag, bool isFlagSpecified, string securityCode, string LbsLoadPass) {
            this.getValueAsync(Flag, FlagSpecified, Value, ValueSpecified, isFlag, isFlagSpecified, securityCode, LbsLoadPass, null);
        }
        
        /// <remarks/>
        public void getValueAsync(short Flag, bool FlagSpecified, int Value, bool ValueSpecified, bool isFlag, bool isFlagSpecified, string securityCode, string LbsLoadPass, object userState) {
            if ((this.getValueOperationCompleted == null)) {
                this.getValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetValueOperationCompleted);
            }
            this.InvokeAsync("getValue", new object[] {
                        Flag,
                        FlagSpecified,
                        Value,
                        ValueSpecified,
                        isFlag,
                        isFlagSpecified,
                        securityCode,
                        LbsLoadPass}, this.getValueOperationCompleted, userState);
        }
        
        private void OngetValueOperationCompleted(object arg) {
            if ((this.getValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getValueCompleted(this, new getValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/getTableName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getTableName(int TableNr, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TableNrSpecified) {
            object[] results = this.Invoke("getTableName", new object[] {
                        TableNr,
                        TableNrSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getTableNameAsync(int TableNr, bool TableNrSpecified) {
            this.getTableNameAsync(TableNr, TableNrSpecified, null);
        }
        
        /// <remarks/>
        public void getTableNameAsync(int TableNr, bool TableNrSpecified, object userState) {
            if ((this.getTableNameOperationCompleted == null)) {
                this.getTableNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTableNameOperationCompleted);
            }
            this.InvokeAsync("getTableName", new object[] {
                        TableNr,
                        TableNrSpecified}, this.getTableNameOperationCompleted, userState);
        }
        
        private void OngetTableNameOperationCompleted(object arg) {
            if ((this.getTableNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTableNameCompleted(this, new getTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/printDoc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void printDoc(short doctype, [System.Xml.Serialization.XmlIgnoreAttribute()] bool doctypeSpecified, int docRef, [System.Xml.Serialization.XmlIgnoreAttribute()] bool docRefSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string termCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string designTitle, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string printerCode, short printCnt, [System.Xml.Serialization.XmlIgnoreAttribute()] bool printCntSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LbsLoadPass) {
            this.Invoke("printDoc", new object[] {
                        doctype,
                        doctypeSpecified,
                        docRef,
                        docRefSpecified,
                        termCode,
                        designTitle,
                        printerCode,
                        printCnt,
                        printCntSpecified,
                        securityCode,
                        LbsLoadPass});
        }
        
        /// <remarks/>
        public void printDocAsync(short doctype, bool doctypeSpecified, int docRef, bool docRefSpecified, string termCode, string designTitle, string printerCode, short printCnt, bool printCntSpecified, string securityCode, string LbsLoadPass) {
            this.printDocAsync(doctype, doctypeSpecified, docRef, docRefSpecified, termCode, designTitle, printerCode, printCnt, printCntSpecified, securityCode, LbsLoadPass, null);
        }
        
        /// <remarks/>
        public void printDocAsync(short doctype, bool doctypeSpecified, int docRef, bool docRefSpecified, string termCode, string designTitle, string printerCode, short printCnt, bool printCntSpecified, string securityCode, string LbsLoadPass, object userState) {
            if ((this.printDocOperationCompleted == null)) {
                this.printDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprintDocOperationCompleted);
            }
            this.InvokeAsync("printDoc", new object[] {
                        doctype,
                        doctypeSpecified,
                        docRef,
                        docRefSpecified,
                        termCode,
                        designTitle,
                        printerCode,
                        printCnt,
                        printCntSpecified,
                        securityCode,
                        LbsLoadPass}, this.printDocOperationCompleted, userState);
        }
        
        private void OnprintDocOperationCompleted(object arg) {
            if ((this.printDocCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.printDocCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ISvc/getInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref object resultXML, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string securityCode) {
            object[] results = this.Invoke("getInfo", new object[] {
                        resultXML,
                        securityCode});
            resultXML = ((object)(results[0]));
        }
        
        /// <remarks/>
        public void getInfoAsync(object resultXML, string securityCode) {
            this.getInfoAsync(resultXML, securityCode, null);
        }
        
        /// <remarks/>
        public void getInfoAsync(object resultXML, string securityCode, object userState) {
            if ((this.getInfoOperationCompleted == null)) {
                this.getInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInfoOperationCompleted);
            }
            this.InvokeAsync("getInfo", new object[] {
                        resultXML,
                        securityCode}, this.getInfoOperationCompleted, userState);
        }
        
        private void OngetInfoOperationCompleted(object arg) {
            if ((this.getInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInfoCompleted(this, new getInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AppendDataObjectCompletedEventHandler(object sender, AppendDataObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppendDataObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppendDataObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int dataReference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool dataReferenceSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string dataXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string paramXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string errorString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ReadDataObjectCompletedEventHandler(object sender, ReadDataObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadDataObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadDataObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int dataReference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool dataReferenceSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string dataXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string paramXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string errorString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ReadDataObjectXMLCompletedEventHandler(object sender, ReadDataObjectXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadDataObjectXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadDataObjectXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int dataReference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool dataReferenceSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string dataXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string paramXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string errorString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DeleteDataObjectCompletedEventHandler(object sender, DeleteDataObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDataObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDataObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CalculateDataObjectCompletedEventHandler(object sender, CalculateDataObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateDataObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateDataObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int dataReference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool dataReferenceSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string dataXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string paramXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string errorString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecQueryCompletedEventHandler(object sender, ExecQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object resultXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void DirectQueryCompletedEventHandler(object sender, DirectQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DirectQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DirectQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool statusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getValueCompletedEventHandler(object sender, getValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Value {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ValueSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getTableNameCompletedEventHandler(object sender, getTableNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTableNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTableNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void printDocCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getInfoCompletedEventHandler(object sender, getInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object resultXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591